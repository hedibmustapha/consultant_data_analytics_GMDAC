df <- data.table::fread(file = path_tofile,
stringsAsFactors = F,
na.strings = c("","na","n/a","NA",NA)) %>%                                                     as.data.frame
colnames(df) <- to_alphanumeric_lowercase(colnames(df))
return(df)
}
#Creates a weighting function from sampling frame
create_weights <- function(sampling.frame, data.stratum.column,
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names", data = NULL){
surveyweights::weighting_fun_from_samplingframe(
sampling.frame =  sampling.frame,
data.stratum.column = data.stratum.column,
sampling.frame.population.column = sampling.frame.population.column,
sampling.frame.stratum.column = sampling.frame.stratum.column,
data = data)
}
plot_animated_ggplot <- function(summary_object, categories, numbers, states,plot_title, plot_caption = NULL){
categories <- sym(categories)
numbers <- sym(numbers)
states <- sym(states)
ggplot(summary_object, aes(x = !!categories,
y = !!numbers * 100, fill = !!categories)) +
geom_col(position = 'dodge') +
labs(title = plot_title,
caption = plot_caption,
x = NULL,
y = NULL) +
theme_minimal() +
theme(
legend.position = 'none',
plot.title = element_text(hjust = 0.5, face = "bold", size = 13.2),
text = element_text('Arial'),
strip.text = element_text(face = 'bold', hjust = 0),
panel.grid.minor = element_blank()
) +
geom_text(aes(label = paste(round(!!numbers * 100), "%")),
position=position_dodge(width=0.9),
vjust = -0.5) +
transition_states(states = !!states) +
enter_grow() +
exit_fade()
}
plot_flipped_ggplot <- function(summary_object, categories, numbers, plot_title, ymin=0, ymax=100){
categories <- sym(categories)
numbers <- sym(numbers)
ggplot(summary_object, aes(x = reorder(!!categories, !!numbers),
y = !!numbers * 100, fill = !!categories)) +
geom_col(position = 'dodge') +
labs(title = plot_title,
x = NULL,
y = NULL) +
theme_minimal() +
theme(
legend.position = 'none',
plot.title = element_text(hjust = 0.5, face = "bold", size = 13.2),
text = element_text('Arial'),
strip.text = element_text(face = 'bold', hjust = 0),
panel.grid.minor = element_blank()
) +
geom_text(aes(label = paste(round(!!numbers * 100), "%")),
position=position_dodge(width=0.9),
hjust = -0.5) +
coord_flip(ylim = c(ymin,ymax))
}
plot_animated_flipped_ggplot <- function(summary_object, categories, numbers, states, plot_title, ymin=0, ymax=100){
categories <- sym(categories)
numbers <- sym(numbers)
states <- sym(states)
ggplot(summary_object, aes(x = reorder(!!categories, !!numbers),
y = !!numbers * 100, fill = !!categories)) +
geom_col(position = 'dodge') +
labs(title = plot_title,
x = NULL,
y = NULL) +
theme_minimal() +
theme(
legend.position = 'none',
plot.title = element_text(hjust = 0.5, face = "bold", size = 13.2),
text = element_text('Arial'),
strip.text = element_text(face = 'bold', hjust = 0),
panel.grid.minor = element_blank()
) +
geom_text(aes(label = paste(round(!!numbers * 100), "%")),
position=position_dodge(width=0.9),
hjust = -0.5) +
coord_flip(ylim = c(ymin,ymax) +
transition_states(states = !!states) +
enter_grow() +
exit_fade()
}
#install only packages not available in the library
install_new_packages <- function(list.of.packages){
new.packages <- list.of.packages[!(list.of.packages %in%                                      installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
}
#sanitize dataframe headers
to_alphanumeric_lowercase <- function(x){
tolower(gsub("[^a-zA-Z0-9_]", "\\.", x))
}
#read csv files
import_csv <- function(path_tofile){
assertthat::assert_that(grepl(x = path_tofile, pattern = ".csv$"),
msg = "file must end with '.csv' (..and actually be a .csv file)")
df <- data.table::fread(file = path_tofile,
stringsAsFactors = F,
na.strings = c("","na","n/a","NA",NA)) %>%                                                     as.data.frame
colnames(df) <- to_alphanumeric_lowercase(colnames(df))
return(df)
}
#Creates a weighting function from sampling frame
create_weights <- function(sampling.frame, data.stratum.column,
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names", data = NULL){
surveyweights::weighting_fun_from_samplingframe(
sampling.frame =  sampling.frame,
data.stratum.column = data.stratum.column,
sampling.frame.population.column = sampling.frame.population.column,
sampling.frame.stratum.column = sampling.frame.stratum.column,
data = data)
}
plot_animated_ggplot <- function(summary_object, categories, numbers, states,plot_title, plot_caption = NULL){
categories <- sym(categories)
numbers <- sym(numbers)
states <- sym(states)
ggplot(summary_object, aes(x = !!categories,
y = !!numbers * 100, fill = !!categories)) +
geom_col(position = 'dodge') +
labs(title = plot_title,
caption = plot_caption,
x = NULL,
y = NULL) +
theme_minimal() +
theme(
legend.position = 'none',
plot.title = element_text(hjust = 0.5, face = "bold", size = 13.2),
text = element_text('Arial'),
strip.text = element_text(face = 'bold', hjust = 0),
panel.grid.minor = element_blank()
) +
geom_text(aes(label = paste(round(!!numbers * 100), "%")),
position=position_dodge(width=0.9),
vjust = -0.5) +
transition_states(states = !!states) +
enter_grow() +
exit_fade()
}
plot_flipped_ggplot <- function(summary_object, categories, numbers, plot_title, ymin=0, ymax=100){
categories <- sym(categories)
numbers <- sym(numbers)
ggplot(summary_object, aes(x = reorder(!!categories, !!numbers),
y = !!numbers * 100, fill = !!categories)) +
geom_col(position = 'dodge') +
labs(title = plot_title,
x = NULL,
y = NULL) +
theme_minimal() +
theme(
legend.position = 'none',
plot.title = element_text(hjust = 0.5, face = "bold", size = 13.2),
text = element_text('Arial'),
strip.text = element_text(face = 'bold', hjust = 0),
panel.grid.minor = element_blank()
) +
geom_text(aes(label = paste(round(!!numbers * 100), "%")),
position=position_dodge(width=0.9),
hjust = -0.5) +
coord_flip(ylim = c(ymin,ymax))
}
plot_animated_flipped_ggplot <- function(summary_object, categories, numbers, states, plot_title, ymin=0, ymax=100){
categories <- sym(categories)
numbers <- sym(numbers)
states <- sym(states)
ggplot(summary_object, aes(x = reorder(!!categories, !!numbers),
y = !!numbers * 100, fill = !!categories)) +
geom_col(position = 'dodge') +
labs(title = plot_title,
x = NULL,
y = NULL) +
theme_minimal() +
theme(
legend.position = 'none',
plot.title = element_text(hjust = 0.5, face = "bold", size = 13.2),
text = element_text('Arial'),
strip.text = element_text(face = 'bold', hjust = 0),
panel.grid.minor = element_blank()
) +
geom_text(aes(label = paste(round(!!numbers * 100), "%")),
position=position_dodge(width=0.9),
hjust = -0.5) +
coord_flip(ylim = c(ymin,ymax)) +
transition_states(states = !!states) +
enter_grow() +
exit_fade()
}
f <- function(x) {
r <- quantile(x, probs = c(0.00, 0.25, 0.5, 0.75, 1))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r}
#Map results to an output template
render_report_rmd <- function(x, dir, filename) {
template <- "code/report.Rmd"
render_environment <- new.env()
render_environment$x <- x
rmarkdown::render(
template,
output_file = filename,
output_dir = dir,
intermediates_dir = dir,
envir = render_environment,
knit_root_dir = getwd()
)
}
plot_flipped_ggplot(watersource_summary,
"primary_drinkingwater_source",
"numbers",
"Main reported sources of drinking water",
0, 75)
plot_animated_flipped_ggplot(access_publicwater_summary,
"access_public_water_network","numbers",
"displacement_status",
"access to the water from the public network in the last 7 days for {closest_state}",
0, 75)
plot_animated_flipped_ggplot(access_publicwater_summary,
"access_public_water_network","numbers",
"displacement_status",
"access to the water from the public network in the last 7 days for
{closest_state}",
0, 75)
plot_animated_flipped_ggplot(access_publicwater_summary,
"access_public_water_network","numbers",
"displacement_status",
"access to the water from the public network
in the last 7 days for {closest_state}",
0, 75)
ggplot(income_summary, aes(x=displacement_status,
ymin = income_q00,
lower = income_q25,
middle = numbers,
upper = income_q75,
ymax = income_q100,
width = 0.7,
fill = displacement_status)) +
geom_boxplot(stat = "identity") +
theme_bw() +
theme(legend.position = 'none',
plot.title = element_text(hjust = 0.5, face = "bold", size = 13.2),
text = element_text('Arial'),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size=.1, color="grey85"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, size = 10.2, hjust = 0.5)) +
labs(title = "Median total Household income by displacement groups",
x = NULL,
y = " Income (LYD)") +
coord_cartesian(ylim=c(0, 5000)) +
geom_text(data = income_summary,
aes(y = numbers, label = round(numbers,digits = 0)),
size = 3.52, hjust = -2.57, vjust =  0.6)
# create survey design
design <- data %>% as_survey(weights = c(strata.weights))
fcs_summary <- design %>%
group_by(displacement_status,fcs_category) %>%
summarize(numbers = survey_mean())
rcsi_summary <- design %>%
group_by(displacement_status,rcsi_category) %>%
summarize(numbers = survey_mean())
lcsi_summary <- design %>%
group_by(displacement_status,lcsi) %>%
summarize(numbers = survey_mean(na.rm =T))
foodsource_summary <- design %>%
summarize(Market_purchased_cash = survey_mean(food_source.market_cash),
Market_purchased_cheque = survey_mean(food_source.market_cheque),
Market_purchased_credit = survey_mean(food_source.market_credit)) %>%
pivot_longer(c(Market_purchased_cash,
Market_purchased_cheque,
Market_purchased_credit))
watersource_summary <- design %>%
group_by(primary_drinkingwater_source) %>%
summarize(numbers = survey_mean()) %>%
arrange(-numbers)
access_publicwater_summary <- design %>%
group_by(displacement_status, access_public_water_network) %>%
summarize(numbers = survey_mean()) %>%
arrange(-numbers)
income_summary <- design %>%
group_by(displacement_status) %>%
summarize(
numbers = survey_median(total_income, na.rm = T, vartype = NULL),
income = survey_quantile(total_income, quantile = c(0,0.25, 0.75,1), vartype = NULL, na.rm = T)) %>%
mutate(level = "income")
income_summary$displacement_status <- with(income_summary,
reorder(income_summary$displacement_status,
numbers,function(x) - median(x, na.rm=TRUE)))
income_summary_strata <- design %>% group_by(mantika_label,displacement_status) %>%
summarize(
numbers = survey_median(total_income, na.rm = T, vartype = NULL)
)
expenditure_summary <- design %>% group_by(displacement_status) %>%
summarize(
numbers = survey_median(total_expenditures, na.rm = T, vartype = NULL),
expenditure = survey_quantile(total_expenditures, quantile = c(0,0.25, 0.75,1), vartype = NULL, na.rm = T)
) %>% mutate(
level = "expenditure"
)
expenditure_summary_strata <- design %>% group_by(mantika_label,displacement_status) %>%
summarize(
numbers = survey_median(total_expenditures, na.rm = T, vartype = NULL)
)
income_expenditure <- bind_rows(income_summary,expenditure_summary)
foodsource_summary
View(foodsource_summary)
foodsource_summary <- design %>%
summarize(Market_purchased_cash = survey_mean(food_source.market_cash),
Market_purchased_cheque = survey_mean(food_source.market_cheque),
Market_purchased_credit = survey_mean(food_source.market_credit)) %>%
pivot_longer(c(Market_purchased_cash,
Market_purchased_cheque,
Market_purchased_credit))
# create survey design
design <- data %>% as_survey(weights = c(strata.weights))
fcs_summary <- design %>%
group_by(displacement_status,fcs_category) %>%
summarize(numbers = survey_mean())
rcsi_summary <- design %>%
group_by(displacement_status,rcsi_category) %>%
summarize(numbers = survey_mean())
lcsi_summary <- design %>%
group_by(displacement_status,lcsi) %>%
summarize(numbers = survey_mean(na.rm =T))
foodsource_summary <- design %>%
summarize(Market_purchased_cash = survey_mean(food_source.market_cash),
Market_purchased_cheque = survey_mean(food_source.market_cheque),
Market_purchased_credit = survey_mean(food_source.market_credit)) %>%
pivot_longer(c(Market_purchased_cash,
Market_purchased_cheque,
Market_purchased_credit)) %>%
recode(name, Market_purchased_cash = "Market purchased cash",
Market_purchased_cheque = "Market purchased cheque",
Market_purchased_credit = "Market purchased credit")
foodsource_summary <- design %>%
summarize(Market_purchased_cash = survey_mean(food_source.market_cash),
Market_purchased_cheque = survey_mean(food_source.market_cheque),
Market_purchased_credit = survey_mean(food_source.market_credit)) %>%
pivot_longer(c(Market_purchased_cash,
Market_purchased_cheque,
Market_purchased_credit)) %>%
recode(name, Market_purchased_cash = "Market purchased cash",
Market_purchased_cheque = "Market purchased cheque",
Market_purchased_credit = "Market purchased credit")
design %>%
summarize(Market_purchased_cash = survey_mean(food_source.market_cash),
Market_purchased_cheque = survey_mean(food_source.market_cheque),
Market_purchased_credit = survey_mean(food_source.market_credit)) %>%
pivot_longer(c(Market_purchased_cash,
Market_purchased_cheque,
Market_purchased_credit))
foodsource_summary <- design %>%
summarize(Market_purchased_cash = survey_mean(food_source.market_cash),
Market_purchased_cheque = survey_mean(food_source.market_cheque),
Market_purchased_credit = survey_mean(food_source.market_credit)) %>%
pivot_longer(c(Market_purchased_cash,
Market_purchased_cheque,
Market_purchased_credit)) %>%
recode(.$name, Market_purchased_cash = "Market purchased cash",
Market_purchased_cheque = "Market purchased cheque",
Market_purchased_credit = "Market purchased credit")
foodsource_summary <- design %>%
summarize(Market_purchased_cash = survey_mean(food_source.market_cash),
Market_purchased_cheque = survey_mean(food_source.market_cheque),
Market_purchased_credit = survey_mean(food_source.market_credit)) %>%
pivot_longer(c(Market_purchased_cash,
Market_purchased_cheque,
Market_purchased_credit)) %>%
mutate(name = recode(
Market_purchased_cash = "Market purchased cash",
Market_purchased_cheque = "Market purchased cheque",
Market_purchased_credit = "Market purchased credit"
))
foodsource_summary <- design %>%
summarize(Market_purchased_cash = survey_mean(food_source.market_cash),
Market_purchased_cheque = survey_mean(food_source.market_cheque),
Market_purchased_credit = survey_mean(food_source.market_credit)) %>%
pivot_longer(c(Market_purchased_cash,
Market_purchased_cheque,
Market_purchased_credit)) %>%
mutate(name = recode(name,
Market_purchased_cash = "Market purchased cash",
Market_purchased_cheque = "Market purchased cheque",
Market_purchased_credit = "Market purchased credit"
))
plot_flipped_ggplot(foodsource_summary,
"name",
"value",
"Top 3 sources from which households reported acquiring food")
plot_ly(income_expenditure,
x = ~displacement_status,
y = ~numbers, type = 'bar',
color = ~level) %>%
layout(title = "Median Household income vs. Median Household expenditure", yaxis = list(title = "LYD"),
xaxis = list(title = ""),
barmode = 'group', titlefont=list(size =14.6, family = "ARIAL", color = "black"))
plot_ly(income_expenditure,
x = ~displacement_status,
y = ~numbers, type = 'bar',
color = ~level) %>%
layout(title = "Median Household income vs. Median Household expenditure", yaxis = list(title = "LYD"),
xaxis = list(title = ""),
barmode = 'group', titlefont=list(size =14.6, family = "ARIAL", color = "black", face = "bold"))
plot_flipped_ggplot(foodsource_summary,
"name",
"value",
"Top 3 sources from which households reported
acquiring food")
plot_flipped_ggplot(foodsource_summary,
"name",
"value",
"Top 3 sources from which households reported
acquiring food")
plot_flipped_ggplot(foodsource_summary,
"name",
"value",
"Top 3 sources from which households reported
acquiring food")
plot_flipped_ggplot(foodsource_summary,
"name",
"value",
"Top 3 sources from which households reported
acquiring food")
plot_ly(income_expenditure,
x = ~displacement_status,
y = ~numbers, type = 'bar',
color = ~level) %>%
layout(title = "Median Household income vs. Median Household expenditure", yaxis = list(title = "LYD"),
xaxis = list(title = ""),
barmode = 'group', titlefont=list(size =15.6, family = "ARIAL", color = "black", face = "bold"))
income_summary_strata %>%
dplyr::rename(Medians = numbers) %>%
datatable()
income_summary_strata %>%
dplyr::rename(medians = numbers) %>%
datatable(options = list(
rowCallback = JS(
"function(row, data) {",
"var medians = data[3].toString() + 'LYD';",
"}")
))
income_summary_strata %>%
dplyr::rename(medians = numbers) %>%
datatable(options = list(
rowCallback = JS(
"function(row, data) {",
"var num = data[3].toString() + 'LYD';",
"}")
))
income_summary_strata %>%
dplyr::rename(medians = numbers) %>%
datatable(options = list(
rowCallback = JS(
"function(row, data) {",
"var medians = data[3].toString() + 'LYD';",
"$('td:eq(3)', row).html(medians);",
"}")
))
income_summary_strata %>%
dplyr::rename(medians = numbers) %>%
datatable(options = list(
rowCallback = JS(
"function(row, data) {",
"var medians = data[3].toString() + ' LYD';",
"$('td:eq(3)', row).html(medians);",
"}")
))
expenditure_summary_strata %>%
dplyr::rename(medians = numbers) %>%
datatable(options = list(
rowCallback = JS(
"function(row, data) {",
"var medians = data[3].toString() + ' LYD';",
"$('td:eq(3)', row).html(medians);",
"}")
))
library(leaflet)
admin2_polygone <- read.csv("./input/lby_admin2.csv")
leaflet() %>%
leaflet::addTiles()
admin2_polygone[,c("Shape_Length","Shape_Area")]
leaflet(admin2_polygone[,c("Shape_Length","Shape_Area")]) %>%
leaflet::addTiles()
leaflet(admin2_polygone[,c("Shape_Length","Shape_Area")]) %>%
leaflet::addCircles()
leaflet(admin2_polygone[,c("Shape_Length","Shape_Area")]) %>%
leaflet::addPolygons()
cbind(c(2, 4, 4, 1, 2), c(2, 3, 5, 4, 2))
cbind(c(5, 4, 2, 5), c(2, 3, 2, 2))
Sr1 <- Polygon(admin2_polygone[,c("Shape_Length","Shape_Area")])
SpatialPolygons(Sr1)
SpP = SpatialPolygons(list(Sr1))
Sr <- Polygon(admin2_polygone[,c("Shape_Length","Shape_Area")])
Srs <- Polygons(list(Sr), "s1")
SpP <- SpatialPolygons(list(Sr1))
leaflet() %>% addPolygons(data = Srs)
library(sf)
sf::st_read(dsn = "MantikaLabels.gdb")
map <-  sf::st_read(dsn = "MantikaLabels.gdb")
map
View(map)
leaflet() %>% addPolygons(data = map)
map <-  sf::st_read(dsn = "lby_adm_unosat_lbsc_20180507.gdb")
map <-  sf::st_read(dsn = "lby_adm_unosat_lbsc_20180507.gdb")
leaflet() %>% addPolygons(data = map)
st_layers(map)
